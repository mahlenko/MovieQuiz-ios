import UIKit

/**
    View controller Movie Quiz App
*/
class MovieQuizViewController: UIViewController, QuestionDelegate {
    // MARK: - Properties

    private var alertPresenter: AlertPresenter?

    private var statisticStore: StatisticServiceProtocol?

    private var presenter: MovieQuizPresenter!

    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }

    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }

    // MARK: - Outlets

    @IBOutlet private var viewContainer: UIView!
    @IBOutlet private weak var quizStepsLabel: UILabelTheme!
    @IBOutlet private weak var quizImageView: UIImageView!
    @IBOutlet private weak var quizQuestionLabel: UILabel!
    @IBOutlet private weak var falseButton: UIButtonTheme!
    @IBOutlet private weak var trueButton: UIButtonTheme!
    @IBOutlet private weak var activityIndicator: UIActivityIndicatorView!

    // MARK: - Actions

    @IBAction private func falseButtonClicked(_ sender: Any) {
        checkAnswer(answer: false)
    }

    @IBAction private func trueButtonClicked(_ sender: Any) {
        checkAnswer(answer: true)
    }

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        configuration()

        alertPresenter = AlertPresenter(delegate: self)
        statisticStore = StatisticDefaultService()

        let networkClient = NetworkClient()
        networkClient.activityIndicator = ActivityIndicator(activityIndicatorView: activityIndicator)

        presenter = MovieQuizPresenter(network: networkClient)
        presenter.viewController = self
        presenter.loadMovies()
    }

    /// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—à–ª–∞
    func didLoadDataFromServer() {
        print("–§–∏–ª—å–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
    }

    /// –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
    func didFailToLoadData(with error: Error) {
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å–º–æ–≤: \(error.localizedDescription).")

        guard let alertPresenter = alertPresenter else {
            print(error.localizedDescription)
            return
        }

        alertPresenter.view(
            title: "üòî",
            message: "\(error.localizedDescription)",
            actions: [
                UIAlertAction(title: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", style: .default) {[weak self] _ in
                    guard let self = self else {
                        return
                    }

                    self.presenter.loadMovies()
                }
            ])
    }

    /// –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—É–¥–∞—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ)
    func didFailToLoadQuestion(with error: Error) {
        print("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: \(error.localizedDescription)")

        guard let alertPresenter = self.alertPresenter else {
            return
        }

        alertPresenter.view(
            title: "üòî",
            message: "\(error.localizedDescription)",
            actions: [
                UIAlertAction(title: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", style: .default) {[weak self] _ in
                    guard let self = self else {
                        return
                    }

                    // –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑
                    self.presenter.show()
                }
            ])
    }

    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    func didViewQuestion(question: QuestionViewModel) {
        quizImageView.image = question.image
        quizQuestionLabel.text = question.question
        quizStepsLabel.text = question.stepsTextLabel

        resultDefaultView()

        print("–í–æ–ø—Ä–æ—Å –ø–æ–∫–∞–∑–∞–Ω –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    }

    /// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∫–≤–∏–∑–∞
    func didCompleteQuiz(currenctQuizStatistic: StatisticQuizViewModel) {
        guard let statisticStore = statisticStore else { return }

        // —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–≤–∏–∑ –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statisticStore.store(statistic: currenctQuizStatistic)

        var bestQuizScore = "---"
        let totalQuizes = statisticStore.all().count
        if let bestQuiz = statisticStore.bestQuiz() {
            bestQuizScore = "\(bestQuiz.current) (\(bestQuiz.completedAt.dateTimeString))"
        }

        let isWinner = currenctQuizStatistic.avgAccuracy == 100

        alertPresenter?.view(
            title: isWinner ? "üéâ –ü–æ–±–µ–¥–∞!" : "–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω",
            message:
                "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(currenctQuizStatistic.current)\n" +
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω—ã—Ö –∫–≤–∏–∑–æ–≤: \(totalQuizes)\n" +
                "–†–µ–∫–æ—Ä–¥: \(bestQuizScore)\n" +
                "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: \(statisticStore.average().rounded(length: 2))%",
            actions: [
                UIAlertAction(
                    title: isWinner ? "–°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑" : "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑",
                    style: .default) {[weak self] _ in
                        guard let self = self else {
                            return
                        }

                        self.presenter.restartQuiz()
                }
            ]
        )
    }

    // MARK: - Private methods

    private func checkAnswer(answer: Bool) {
        buttonsEnabled(false)

        presenter?.checkAnswer(answer: answer) { result in
            if result {
                resultSuccessView()
            } else {
                resultFailureView()
            }
        }
    }
    // MARK: - Helpers

    private func buttonsEnabled(_ enabled: Bool) {
        let buttons = [trueButton, falseButton]
        buttons.forEach { $0?.isEnabled = enabled }
    }

    private func resultSuccessView() {
        setImageBorderView(UIColor.success)
        print("üéâ The answer is correct")
    }

    private func resultFailureView() {
        setImageBorderView(UIColor.fail)
        print("üòî The answer is NOT correct")
    }

    private func resultDefaultView() {
        quizImageView.layer.borderColor = .none
        quizImageView.layer.borderWidth = .nan

        buttonsEnabled(true)
    }

    private func setImageBorderView(_ color: UIColor) {
        quizImageView.layer.borderColor = color.cgColor
        quizImageView.layer.borderWidth = 8.0
    }


    private func configuration() {
        viewContainer.backgroundColor = UIColor.background

        quizImageView.layer.cornerRadius = 20
        quizImageView.image = UIImage(named: "Background")
        quizImageView.backgroundColor = UIColor.backgroundImage

        quizQuestionLabel.text = ""
        quizQuestionLabel.font = UIFont(
            name: ThemeFonts.family.bold,
            size: ThemeFonts.size.large)

        activityIndicator.color = UIColor.accent
        activityIndicator.backgroundColor = UIColor.background
        activityIndicator.layer.cornerRadius = 10
        activityIndicator.isHidden = true

        print("‚úÖ Configured storyboard")
    }
}
