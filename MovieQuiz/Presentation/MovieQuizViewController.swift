import UIKit

/**
    View controller Movie Quiz App
*/
final class MovieQuizViewController: UIViewController, QuestionFactoryDelegate {
    // MARK: - Properties

    private var movies: QuestionFactoryProtocol?

    private var storage: StatisticServiceProtocol = StatisticDefaultService()

    private var alertPresenter: ResultAlertPresenter?

    private var quiz: QuizModel?

    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }

    override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
        return .portrait
    }

    // MARK: - Outlets

    @IBOutlet private var viewContainer: UIView!
    @IBOutlet private weak var quizStepsLabel: UILabelTheme!
    @IBOutlet private weak var quizImageView: UIImageView!
    @IBOutlet private weak var quizQuestionLabel: UILabel!
    @IBOutlet private weak var falseButton: UIButtonTheme!
    @IBOutlet private weak var trueButton: UIButtonTheme!
    @IBOutlet private weak var activityIndicator: UIActivityIndicatorView!

    // MARK: - Actions

    @IBAction private func falseButtonClicked(_ sender: Any) {
        check(answer: false)
    }

    @IBAction private func trueButtonClicked(_ sender: Any) {
        check(answer: true)
    }

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        alertPresenter = ResultAlertPresenter(delegate: self)
        configuration()

        create()
    }

    func didLoadDataFromServer() {
        activityIndicatorShowing(show: false)

        guard let movies = movies else { return }

        quiz = QuizModel(questions: movies)
        next()
    }

    func didFailToLoadData(with error: Error) {
        activityIndicatorShowing(show: false)

        guard let alertPresenter = alertPresenter else {
            print(error)
            print(error.localizedDescription)
            return
        }

        alertPresenter.view(
            title: "üòî",
            message: "\(error): \(error.localizedDescription)",
            actions: [
                UIAlertAction(title: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", style: .default) {_ in
                    self.create()
                }
            ])
    }

    func didReceiveNextQuestion(question: QuizStepViewModel?) {
        guard let question = question else { return }

        quizImageView.image = question.image
        quizQuestionLabel.text = question.question
        quizStepsLabel.text = question.stepsTextLabel

        enableControls(true)
    }

    // MARK: - Private methods

    /// –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É/—Ä–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
    private func create() {
        activityIndicatorShowing(show: true)
        movies = QuestionIMDBFactory(delegate: self)
    }

    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private func check(answer: Bool) {
        guard let quiz = quiz else { return }

        enableControls(false)

        if let isCorrectResult = quiz.checkAnswer(answer: answer) {
            isCorrectResult ? successImageView() : failedImageView()
        }

        // Go to the next question or wait for results with a delay of 1 second
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            self.setImageBorderView()

            quiz.isComplete()
                ? self.complete(quiz: quiz)
                : self.next()
        }
    }

    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    private func next() {
        guard let quiz = quiz else { return }
        quiz.nextQuestion()
    }

    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    private func complete(quiz: QuizModel) {
        let statistic = StatisticViewModel(
            current: quiz.resultText(),
            avgAccuracy: quiz.percentAccuracy(),
            completedAt: Date()
        )

        storage.store(statistic: statistic)

        // –ø–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö

        guard let alertPresenter = alertPresenter else { return }
        guard let bestScrore = storage.bestQuiz() else { return }

        let bestScore = "\(bestScrore.current) (\(bestScrore.completedAt.dateTimeString)"

        alertPresenter.view(
            title: statistic.avgAccuracy == 100 ? "üéâ –ü–æ–±–µ–¥–∞!" : "–≠—Ç–æ—Ç —Ä–∞—É–Ω–¥ –æ–∫–æ–Ω—á–µ–Ω",
            message:
                "–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: \(statistic.current)\n" +
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—ã–≥—Ä–∞–Ω—ã—Ö –∫–≤–∏–∑–æ–≤: \(storage.all().count)\n" +
                "–†–µ–∫–æ—Ä–¥: \(bestScore)\n" +
                "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: \(storage.average().rounded(length: 2))%",
            actions: [
                UIAlertAction(title: "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", style: .default) {_ in
                    self.create()
                }
            ]
        )
    }

    // MARK: - Helpers

    /// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–ø—Ä—è—Ç–∞—Ç—å –ª–æ–∞–¥–µ—Ä
    private func activityIndicatorShowing(show: Bool) {
        activityIndicator.isHidden = !show
        show
            ? activityIndicator.startAnimating()
            : activityIndicator.stopAnimating()
    }

    private func successImageView() {
        setImageBorderView(UIColor.success)
        print("üéâ The answer is correct")
    }

    private func failedImageView() {
        setImageBorderView(UIColor.fail)
        print("üòî The answer is NOT correct")
    }

    private func setImageBorderView(_ color: UIColor? = .none) {
        quizImageView.layer.borderColor = color?.cgColor
        quizImageView.layer.borderWidth = color == .none ? .nan : 8.0
    }

    private func enableControls(_ enable: Bool) {
        [trueButton, falseButton].forEach { $0?.isEnabled = enable }
    }

    private func configuration() {
        viewContainer.backgroundColor = UIColor.background
        quizImageView.layer.cornerRadius = 20
        quizImageView.image = UIImage(named: "Background")
        quizQuestionLabel.font = UIFont(name: ThemeFonts.family.bold, size: ThemeFonts.size.large)
        quizQuestionLabel.text = ""

        activityIndicator.color = UIColor.accent
        activityIndicator.backgroundColor = UIColor.background
        activityIndicator.layer.cornerRadius = 10
        activityIndicator.isHidden = true

        enableControls(false)

        print("‚úÖ Configured storyboard")
    }
}
